## Bond simulation of wheat straw for the cantilever beam test

### Material Independent Properties
variable beam_length             equal 0.150      # meters
variable particle_diameter       equal 2.83e-3    # meters
variable bond_out_diameter       equal 2.83e-3    # meters
variable bond_in_diameter        equal 0.0        # meters
variable bond_damp_type          equal 1          # Use Yu Guo Damping
variable bond_damp_val           equal 50.0       # NA
variable particle_density        equal 420.0      # kg/m3
variable contact_youngs_modulus  equal 1.0e9      # Pa
variable bond_youngs_modulus     equal 1.0e9      # Pa
variable particle_poissons_ratio equal 0.3        # NA

### Simulation Independent Parameters
variable deflection_distance     equal 20.0e-3 # distance to deflect the straw
variable deflection_speed        equal 1.0     # the speed of the deflection (m/s)
variable wait_time               equal 25.0e-3 # time we wait for the beam to settle in seconds
variable vibrate_time            equal 0.125   # time we let the beam vibrate in seconds
variable fileprint_time          equal 1.0e-3  # how often we print to the file in seconds
variable thermo_time             equal 1.0e-4  # how often we print to the screen in seconds
variable output_time             equal 5.0e-5  # how often we print to beam.csv in seconds

### Material Dependent Properties
variable particle_radius         equal 0.5*${particle_diameter}
variable bond_shear_modulus      equal ${bond_youngs_modulus}/(2.0*(1.0+${particle_poissons_ratio}))
variable bond_out_per            equal ${bond_out_diameter}/${particle_diameter}
variable bond_in_per             equal ${bond_in_diameter}/${particle_diameter}

### Calculate dt using the bond model
variable r2                      equal ${particle_radius}*${particle_radius}
variable r3                      equal ${r2}*${particle_radius}
variable K                       equal ${bond_youngs_modulus}*PI*${r2}/${particle_diameter}
variable m                       equal 4.0*PI*${r3}*${particle_density}/3.0
variable w                       equal sqrt($K/$m)
variable dt                      equal 0.95/((1.0+2.9392*${bond_damp_val})*$w)

### Simulation Dependent Parameters
variable time_to_deflect         equal (${deflection_distance}+0.5*${particle_diameter})/${deflection_speed}
variable run_to_deflect          equal ceil(${time_to_deflect}/${dt})
variable run_to_waittime         equal ceil(${wait_time}/${dt})
variable run_to_vibrate          equal ceil(${vibrate_time}/${dt})
variable fileprint_step          equal ceil(${fileprint_time}/${dt})
variable output_step             equal ceil(${output_time}/${dt})
variable thermo_step             equal ceil(${thermo_time}/${dt})
variable Lx                      equal 1.5*${beam_length}
variable Ly                      equal 2.5*${particle_diameter}
variable Lz                      equal 2.5*${deflection_distance}

# Define a granular particle with granular bonds
# n_bondtypes 1 says that there is only one type of bond in the simulation
# bonds_per_atom 6 means that each particle can have upto 6 bonds
atom_style hybrid granular bond/gran n_bondtypes 1 bonds_per_atom 6

# Needed due to the Young's modulus being greater than 1.0E7
hard_particles yes

# map atoms as a vector for output
atom_modify map array

# Fixed boundary conditions
boundary f f f

# Do not use Newton's third law (This cannot be used due to the pair style being used)
newton off

# Parallel computing settings
processors * 1 1           # x axis will be split for parallelism (Not needed for this simulation)
communicate single vel yes # ghost particles are given position and velocity information
shell mkdir post           # make a folder called post
units si                   # Use SI units

# Contact style
pair_style gran model hertz tangential history # hertz-mindelen
# Bond style
bond_style gran # for the granular fiber bond

# Create the simulation domain
region reg block -${particle_diameter} ${Lx} -${Ly} ${Ly} -${Lz} ${Lz} units box

# Create simulation with 1 type of particle
create_box 1 reg

# Create a region for particle insertion
region bc cylinder x 0.00 0.00 ${particle_radius} 0.0 ${beam_length} units box
lattice sc ${particle_diameter}
create_atoms 1 region bc # Insert spheres of type 1 into region bc

# Skin that is used to determine size of bins for neighbor finding
neighbor 0.001 bin
neigh_modify delay 0 # Update neighbors whenever we need to

# Contact coefficients are calculated from material properties
pair_coeff * *

# Bond coefficients (Bond type) (Outside Bond ) (Inside Bond) (Bond_Y) (Bond_G) (Bond_Damp_Type) (Bond_Damp) (Bond_Break_Type) (Crit_Norm) (Crit_Tan)
bond_coeff 1 ${bond_out_per} ${bond_in_per} ${bond_youngs_modulus} ${bond_shear_modulus} ${bond_damp_type} ${bond_damp_val} 1 1.0e32 1.0e32

# Material Properties
fix m1 all property/global youngsModulus peratomtype ${contact_youngs_modulus}
fix m2 all property/global poissonsRatio peratomtype ${particle_poissons_ratio}
fix m3 all property/global coefficientRestitution peratomtypepair 1 0.5
fix m4 all property/global coefficientFriction peratomtypepair 1 0.001

# Get forces, torques, and eq dist from the bonds
compute bc all property/local batom1x batom1y batom1z batom2x batom2y batom2z batom1 batom2 btype bforceX bforceY bforceZ btorqueX btorqueY btorqueZ beqdist

# Insert particles and set particles to the correct density and diameter
run 0
group bonded id >= 1
set group bonded density ${particle_density} diameter ${particle_diameter} 

# Set a group for the first particle
group freezed id == 1

# Set properties to bond particles together
variable bond_skin equal 1.001*${particle_diameter}
fix bondcr all bond/create/gran 1 1 1 ${bond_skin} 1 6 #every itype jtype cutoff btype newperts

# Set the time step
timestep ${dt}

## Set output parameters
# Get the number of atoms in the system
variable lastone equal atoms
# Get the current simulation time
variable sim_time equal step*${dt}
# Get the x-directional position of the last atom
variable px equal x[${lastone}]
# Get the z-directional position of the last atom
variable pz equal z[${lastone}]
# Get the z-directional velocity of the last atom
variable vz equal vz[${lastone}]
# Print to screen a custom array that includes, the current step of the simulation, the number of atoms in the system, the number of bonds in the system, the current simulation time, how much cpu time has passed, the estimated cpu time remaining, the z-directional position, the z-directional velocity, and the current kinetic energy in the system
thermo_style custom step atoms numbonds v_sim_time cpu cpuremain v_pz v_vz ke
# Have this printed to the screen every "thermo_step" steps
thermo ${thermo_step}
# Ignore lost atoms and do not normalize output
thermo_modify lost ignore norm no

# Select the velocity verlet integrator
fix integr all nve/sphere

## Import Pusher CAD File
# Get positional data so we know where to place the "pusher"
variable push_x equal ${beam_length}-2.0*${particle_diameter}
variable push_z equal 1.0001*${particle_diameter}
# Import the cad file specifying that the file is in mm and reposition it into the correct area
fix p all mesh/surface file Mesh.stl type 1 scale 0.001 move ${push_x} 0.0 ${push_z}
# Tell liggghts that we wish to interact with this geometry
fix wall all wall/gran model hertz tangential history mesh n_meshes 1 meshes p
# Tell liggghts that this geometry moves with a constant velocity
fix move_P all move/mesh mesh p linear 0.0 0.0 -${deflection_speed}

# Set dump file parameters for paraview
dump dmp all custom ${fileprint_step} post/dump*.liggghts id type x y z vx vy vz fx fy fz omegax omegay omegaz radius

# Get bond force and torque values
dump bondforcechain all local ${fileprint_step} post/bfc*.bond &
    c_bc[1] c_bc[2] c_bc[3] c_bc[4] c_bc[5] c_bc[6] c_bc[7] c_bc[8] c_bc[9] c_bc[10] c_bc[11] c_bc[12] c_bc[13] c_bc[14] c_bc[15] c_bc[16]

# Set beam.csv output
variable my_ke equal ke
fix outfile all print ${output_step} "${sim_time}, ${px}, ${pz}, ${my_ke}" file beam.csv screen no title "t, x, z, ke"

# Create bonds between particles
run 1

# do not create new bonds after this line
fix_modify bondcr every 0

# Add gravity to the simulation in the negative x direction
fix gravi all gravity 9.81 vector -1.0 0.0 0.0

# Clamp the left most particle
fix f1 freezed freeze

# Run to the deflection of the beam
run ${run_to_deflect} upto

# Stop the pusher and wait for the fiber to relax
unfix move_P
run ${run_to_waittime}

# Remove the pusher from the simulation. This must be done in the opposite manner of creating the pusher
unfix wall
unfix p

# Let the beam vibrate
run ${run_to_vibrate}
