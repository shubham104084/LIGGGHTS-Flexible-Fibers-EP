## Bond simulation of wheat straw for the cantilever beam test

### Add the DOE file. A MATLAB script is included to show how to create one
include DOE_Params.txt

### Material Independent Properties
variable bond_damp_val_max       equal 10.00      # Max bond damping value (Needed for calculation of time step)
variable bond_youngs_mod_max     equal 10.0e9     # Max bond youngs modulus (Needed for calculation of time step)
variable beam_length             equal 0.150      # meters
variable particle_diameter       equal 2.83e-3    # meters
variable bond_out_diameter       equal 2.83e-3    # meters
variable bond_in_diameter        equal 0.0        # meters
variable bond_damp_type          equal 1          # Use Yu Guo Damping
variable particle_density        equal 125.0      # kg/m3
variable contact_youngs_modulus  equal 1.4e9      # Pa 
variable particle_poissons_ratio equal 0.3        # NA
variable bond_length             equal 2.83e-3    # meters

### Simulation Independent Parameters
variable deflection_distance     equal 20.0e-3 # distance to deflect the straw
variable deflection_speed        equal 1.0     # the speed of the deflection (m/s)
variable wait_time               equal 25.0e-3 # time we wait for the beam to settle in seconds
variable vibrate_time            equal 0.125   # time we let the beam vibrate in seconds
variable fileprint_time          equal 1.0e-3  # how often we print to the file in seconds
variable thermo_time             equal 1.0e-3  # how often we print to the screen in seconds
variable output_time             equal 5.0e-5  # how often we print to beam.csv in seconds

### Material Dependent Properties
variable particle_radius         equal 0.5*${particle_diameter}
variable bond_shear_modulus      equal ${bond_youngs_modulus}/(2.0*(1.0+${particle_poissons_ratio}))
variable bond_out_per            equal ${bond_out_diameter}/${particle_diameter}
variable bond_in_per             equal ${bond_in_diameter}/${particle_diameter}

### Calculate dt using the bond model
variable r2                      equal ${particle_radius}*${particle_radius}
variable r3                      equal ${r2}*${particle_radius}
variable K                       equal ${bond_youngs_mod_max}*PI*${r2}/${bond_length}
variable m                       equal 4.0*PI*${r3}*${particle_density}/3.0
variable w                       equal sqrt($K/$m)
variable dt                      equal 0.95/((1.1+2.9*${bond_damp_val_max})*$w)

### Simulation Dependent Parameters
variable time_to_deflect         equal (${deflection_distance}+0.5*${particle_diameter})/${deflection_speed}
variable run_to_deflect          equal ceil(${time_to_deflect}/${dt})
variable run_to_waittime         equal ceil(${wait_time}/${dt})
variable run_to_vibrate          equal ceil(${vibrate_time}/${dt})
variable fileprint_step          equal ceil(${fileprint_time}/${dt})
variable output_step             equal ceil(${output_time}/${dt})
variable thermo_step             equal ceil(${thermo_time}/${dt})
variable Lx                      equal 1.5*${beam_length}
variable Ly                      equal 2.5*${particle_diameter}
variable Lz                      equal 2.5*${deflection_distance}

# Define a granular particle with granular bonds
# n_bondtypes 1 says that there is only one type of bond in the simulation
# bonds_per_atom 6 means that each particle can have upto 6 bonds
atom_style hybrid granular bond/gran n_bondtypes 1 bonds_per_atom 6

# Needed due to the Young's modulus being greater than 1.0E7
hard_particles yes

# map atoms as a vector for output
atom_modify map array

# Fixed boundary conditions
boundary f f f

# Do not use Newton's third law
newton off

# Parallel computing settings
processors * 1 1           # x axis will be split for parallelism (Not needed for this simulation)
communicate single vel yes # ghost particles are given position and velocity information
shell mkdir results        # make a folder called results
shell mkdir results/run_${run_num}
units si                   # Use SI units

# Contact style
pair_style gran model hertz tangential history # hertz-mindelen
# Bond style
bond_style gran # for the granular fiber bond

# Create the simulation domain
region reg block -${particle_diameter} ${Lx} -${Ly} ${Ly} -${Lz} ${Lz} units box

# Create simulation with 1 type of particle
create_box 1 reg

# Create a region for particle insertion
region bc cylinder x 0.00 0.00 ${particle_radius} 0.0 ${beam_length} units box
lattice sc ${particle_diameter}
create_atoms 1 region bc # Insert spheres of type 1 into region bc

# Skin that is used to determine size of bins for neighbor finding
neighbor 0.001 bin
neigh_modify delay 0 # Update neighbors whenever we need to

# Contact coefficients are calculated from material properties
pair_coeff * *

# Bond coefficients (Bond type) (Outside Bond ) (Inside Bond) (Bond_Y) (Bond_G) (Bond_Damp_Type) (Bond_Damp) (Bond_Break_Type) (Crit_Norm) (Crit_Tan)
bond_coeff 1 ${bond_out_per} ${bond_in_per} ${bond_youngs_modulus} ${bond_shear_modulus} ${bond_damp_type} ${bond_damp_val} 1 1.0e32 1.0e32

# Material Properties
fix m1 all property/global youngsModulus peratomtype ${contact_youngs_modulus}
fix m2 all property/global poissonsRatio peratomtype ${particle_poissons_ratio}
fix m3 all property/global coefficientRestitution peratomtypepair 1 0.5
fix m4 all property/global coefficientFriction peratomtypepair 1 0.001

# Insert particles and set particles to the correct density and diameter
run 0
group bonded id >= 1
set group bonded density ${particle_density} diameter ${particle_diameter} 

# Set a group for the first particle
group freezed id == 1

# Set properties to bond particles together
variable bond_skin equal 1.001*${particle_diameter}
fix bondcr all bond/create/gran 1 1 1 ${bond_skin} 1 6 #every itype jtype cutoff btype newperts

# Set the time step
timestep ${dt}

# Set output parameters
variable lastone equal atoms
variable atom2 equal ${lastone}
variable sim_time equal step*${dt}
variable px equal x[${lastone}]
variable pz equal z[${lastone}]
variable vz equal vz[${lastone}]
thermo_style custom step atoms numbond v_sim_time cpu cpuremain v_pz v_vz ke
thermo ${thermo_step}
thermo_modify lost ignore norm no

# Select the velocity verlet integrator
fix integr all nve/sphere

# Import Pusher CAD File
variable push_x equal ${beam_length}-2.0*${particle_diameter}
variable push_z equal 1.0001*${particle_diameter}
fix p all mesh/surface file Mesh.stl type 1 scale 0.001 move ${push_x} 0.0 ${push_z}
fix wall all wall/gran model hertz tangential history mesh n_meshes 1 meshes p
fix move_P all move/mesh mesh p linear 0.0 0.0 -${deflection_speed}

# Set beam.csv output
variable my_ke equal ke
fix outfile all print ${output_step} "${sim_time}, ${px}, ${pz}, ${my_ke}" file results/run_${run_num}/beam.csv screen no title "t, x, z, ke"

# Create bonds between particles
run 1

# do not create new bonds after this line
fix_modify bondcr every 0

# Add gravity to the simulation in the negative x direction
fix gravi all gravity 9.81 vector -1.0 0.0 0.0

# Clamp the left most particle
fix f1 freezed freeze

# Run to the deflection of the beam
run ${run_to_deflect} upto

# Stop the pusher and wait for the fiber to relax
unfix move_P
run ${run_to_waittime}

# Remove the pusher from the simulation
unfix wall
unfix p

# Let the beam vibrate
run ${run_to_vibrate}

# Tells the script to move onto the next set of DOE parameters
next run_num bond_damp_val bond_youngs_modulus

# Reset the simulation for the next set of parameters
clear

# Jump to the start of this script and rerun the test.
jump in.liggghts
